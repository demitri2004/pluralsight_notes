"Note","Course","Module","Clip","Time in Clip","URL"
"In it's core Git is a map. ","How Git Works","Git Is Not What You Think","Values and Hashes","0:07","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=7&noteid=58e5d66f-8c69-4efa-962a-d01616c1b82a"
"Value <=> Key","How Git Works","Git Is Not What You Think","Values and Hashes","1:37","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=97&noteid=ba3e41ee-8363-4780-8522-ff28d5d6a5eb"
"Value could be any content (bits of data)","How Git Works","Git Is Not What You Think","Values and Hashes","1:37","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=97&noteid=7a8eca50-4227-4d96-a586-eca800303a3f"
"Git generates key using SHA1","How Git Works","Git Is Not What You Think","Values and Hashes","1:37","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=97&noteid=8435fc0c-6432-46c8-a459-f0d9806cb52c"
"key is a hash","How Git Works","Git Is Not What You Think","Values and Hashes","3:10","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=190&noteid=b2e15af9-a729-400b-a68f-c525f1b5b703"
"sha1 hash is super unique","How Git Works","Git Is Not What You Think","Values and Hashes","6:57","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=417&noteid=ba56dee4-ef5a-4203-a965-6c1db0c61a6e"
"and never repeat","How Git Works","Git Is Not What You Think","Values and Hashes","7:22","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=4&mode=live&start=442&noteid=2a29280e-7006-4e12-81c1-e2cdb801bb5f"
"git takes any peace of content (value), generates hash for it (key), and stores is .git file as a blob (peace of content)","How Git Works","Git Is Not What You Think","First Commit!","4:55","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=6&mode=live&start=295&noteid=803057a0-1496-458a-9f13-3dde4086334e"
"when we make a commit it stored in git as a metadata (text) about the commit. It included author, date, message and a tree hash. Tree hash is a pointer to another folder in .git file. In there in saves another peace of data about the files and trees of other folders.","How Git Works","Git Is Not What You Think","First Commit!","5:35","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=6&mode=live&start=335&noteid=c8ad6536-a5c6-4d12-9c7f-dcb35688f945"
"blob is peace of data
tree is a hash to another data","How Git Works","Git Is Not What You Think","First Commit!","7:30","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=6&mode=live&start=450&noteid=d6595548-5420-4ead-8c21-ac0f6b35ecc4"
"when we change just one file and commit the change, git will see which file changed and generate a new hash to a change file but will keep the hash of a tree of the part that didn't change. So it reuses the same hashes and trees for unchanged data. Git is very efficient this way. It never stores data more than once. Just points to a already stored data.","How Git Works","Git Is Not What You Think","Versioning Made Easy","4:00","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m1&clip=7&mode=live&start=240&noteid=45edb7de-a64e-4057-8775-9d4025f75337"
" So Git model is nothing more than a file system that maps commits, trees, blobs, and tags objects.","How Git Works","Branches Demystified","Introduction","0:18","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=0&mode=live&start=18&noteid=14c98053-83cb-4d73-8b6e-290189b9ffb9"
"Branch is just a reference to a commit.","How Git Works","Branches Demystified","What Branches Really Are","1:53","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=1&mode=live&start=113&noteid=6a7cc04c-b493-46ef-90a3-a856a15da13f"
"Branches are stored in refs/heads folder, branch file has a hash to a commit. ","How Git Works","Branches Demystified","What Branches Really Are","4:01","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=1&mode=live&start=241&noteid=5aefc413-52ec-4ea1-8906-53bca2eddebf"
"Git knows which branch we are on at everytime by storing reference to a specific branch in HEAD file in .git folder","How Git Works","Branches Demystified","The Mechanics of the Current Branch","0:57","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=2&mode=live&start=57&noteid=30a2e4a9-1ecd-4662-b8f8-6655bc673748"
" When switching branches, git moves the HEAD to point to another branch (last commit in that branch). Then it changes files in our working directory to files from that commit","How Git Works","Branches Demystified","The Mechanics of the Current Branch","4:55","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=2&mode=live&start=295&noteid=f7f54e0f-8316-42d0-b959-8c684791719a"
"when merging branches, the merge is just a commit that has two parents from merged commits. After merge git moves the HEAD to point to that merged commit (branch)","How Git Works","Branches Demystified","Let's Merge!","3:23","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=3&mode=live&start=203&noteid=a5d0ce3c-e7b1-4c05-b2fd-06e1787a853b"
"When we try to merge commits that git already has merges and commits, git will do fast-forward to simply point branch to latest commit that has all the data needed for your merge. So git is very efficient to reuse the stored data.","How Git Works","Branches Demystified","Merging Without Merging","2:42","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=5&mode=live&start=162&noteid=0cc48035-93f5-454b-8377-d99d29186000"
"Detached HEAD means when we point HEAD to a commit (git switch 9786976), then HEAD doesn't point to any branchs.","How Git Works","Branches Demystified","Losing Your HEAD","1:25","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=6&mode=live&start=85&noteid=c642d87f-cdf1-4b47-a5a4-b3136a82d0a9"
"We can commit to a detached head, when we done and point head back to our branch, those commits from detached head become unreachable over time, git will use garbage collector to remove them completely to save the space, it's efficient.","How Git Works","Branches Demystified","Losing Your HEAD","4:12","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=6&mode=live&start=252&noteid=ed3c5bf7-3b81-47ae-8581-e98a843e1bcb"
" Detached head is good for experiments with the changes that you possibly don't want to keep. But if you decide to keep, you can mark it as branch, then git will keep it and you can always return to that branch commits.","How Git Works","Branches Demystified","Losing Your HEAD","5:36","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m2&clip=6&mode=live&start=336&noteid=8323aecb-34f0-4e79-bd41-562b71e974a4"
"Rebase is Git's signature feature. This is when we have two branches (main & branch). Instead of merge we do rebase: git is separating branch from the main at the point of shared commit. Then it rebases branch to the last commit on main branch. ","How Git Works","Rebasing Made Simple","What a Rebase Looks Like","2:54","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m3&clip=1&mode=live&start=174&noteid=a65a765c-ed2d-4535-80cd-7245dd4a06b1"
"The purpose of rebase is for rearanging the branches into one straight tree where end result has no branches left. When after commit there are tree with braches.","How Git Works","Rebasing Made Simple","What a Rebase Looks Like","4:06","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m3&clip=1&mode=live&start=246&noteid=65dd61f2-045c-40b8-9b37-245083102abe"
"Merge keeps the history as is, when commits are done to all branches stays unchanged. Rebase tweak history to make it look clean and in one line when it puts commits on top of main branch. But the history of all commits get changed. This is useful for huge complex projects. ""When in doubt just merge"". You need to really know what are you doing when rebase.","How Git Works","Rebasing Made Simple","Tags in Brief","0:00","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m3&clip=6&mode=live&start=0&noteid=4bd001e6-3fa0-41fa-bb8b-b79cd9bba814"
"Tags are objects that keep the metadata  and pointer to a specific commit, like message, date, user. Tags are saved in ref/tags folder, they kept next to heads/ folder, because they are like branches. The diff is that branch pointer moves with the branch commits, but tag stays with the same commit. Lightweight tags are simply pointers to a specific commit without metadata. Kept in the same location with the tags.","How Git Works","Rebasing Made Simple","Tags in Brief","5:51","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m3&clip=6&mode=live&start=351&noteid=84377d45-6c6e-4dae-aa84-a792add34133"
"Git is distributed system means that all remote repos have the .git file that includes all the info about the project, all branches, tags. When local repo is in sync with origin they both point to the same commit. Other branches in the origin repo would point to other commits","How Git Works","Distributed Version Control","Local and Remote","4:24","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=2&mode=live&start=264&noteid=d8dd5b3b-3717-4be9-ac3f-347bbd373f63"
"To sync with remote origin, we should never push force the changes, that would push our changes and may lose other new changes on remote. We need to fetch the changes first then merge locally and only then push to update the history and push our changes to remote. That what pull does. Always first pull then push.","How Git Works","Distributed Version Control","The Chore of Pulling","5:15","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=4&mode=live&start=315&noteid=e9cda26c-48a8-421d-a6bf-0e71af1f899e"
"Fork is a GitHub feature when we copy someones GitHub project to our own GitHub account, we fork it.","How Git Works","Distributed Version Control","Getting Social","1:14","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=6&mode=live&start=74&noteid=44f45b0b-e5d6-4d3e-acdb-a5911a1386a5"
"Then we clone this project from our GitHub account to our local and it points to origin in our account. And then we create another pointer (remote) to other gitHub accounts repo, the original one. The remote calls 'upstream'","How Git Works","Distributed Version Control","Getting Social","2:07","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=6&mode=live&start=127&noteid=47dacac9-26fa-4a9f-bd61-1fab2f409976"
"We can't push to upstream, we have no rights.","How Git Works","Distributed Version Control","Getting Social","2:40","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=6&mode=live&start=160&noteid=dfd1bcde-13a4-4886-9e6e-c95eab201756"
"All local changes we push to our origin on our GitHub account then create a pull request to original account's project asking to pull our changes.","How Git Works","Distributed Version Control","Getting Social","3:00","https://app.pluralsight.com/player?course=how-git-works&author=paolo-perrotta&name=how-git-works-m4&clip=6&mode=live&start=180&noteid=47c33360-2f79-4c8c-b30c-d3ebb8bdbe0e"